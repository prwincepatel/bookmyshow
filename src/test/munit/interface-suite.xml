<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="interface-suite.xml" />
	<munit:test name="bookmyshow-api-main-test" doc:id="cd7739f0-d79c-4bb2-8b18-fb16590dc8eb" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock APIkit Router" doc:id="fd936471-e9b4-48e1-8a0c-fea68f8f4505" processor="apikit:router">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a925840c-4f86-4553-ad73-5a60db3cd414" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://bookmyshowapimaintest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://bookmyshowapimaintest\mock_variable_.dwl')]" />
						<munit-tools:variable key="httpStatus" value="#[readUrl('classpath://bookmyshowapimaintest\mock_variable_1.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="eb68f7a8-b33e-471a-b6c4-7e6e6918249e" >
				<munit:payload value="#[readUrl('classpath://bookmyshowapimaintest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://bookmyshowapimaintest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to bookmyshow-api-main" doc:id="06f4dd49-1e82-40cd-8ba4-c6bc80e70472" name="bookmyshow-api-main"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="13718a82-90a9-4158-9890-200f113afc92" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import bookmyshowapimaintest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\movies:bookmyshow-api-config-test" doc:id="470425e1-3499-4a0b-87bc-361171198ec2" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="167a37a4-2bbf-4954-ac3c-d9d80386587c" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="4747038c-6ea7-4ea2-8c47-49f393252c59" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getmoviesbookmyshowapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesbookmyshowapiconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a5120d00-88b5-4ec3-9ef0-ccdba46135bc" >
				<munit:payload value="#[readUrl('classpath://getmoviesbookmyshowapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getmoviesbookmyshowapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesbookmyshowapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\movies:bookmyshow-api-config" doc:id="978aa5b8-d3d6-4a04-8f2f-c75cd6f5d36d" name="get:\movies:bookmyshow-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="8994cd70-1d98-4526-a459-43d5d452f98e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getmoviesbookmyshowapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\movies\(ID):bookmyshow-api-config-test" doc:id="0954d22a-b4ae-4ce9-b994-db822d9f79c9" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="810efe68-e496-43a8-ab15-2a8c1f4d1d3a" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d429b41c-5f03-4690-8838-6b25c0594ca3" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://getmoviesIDbookmyshowapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesIDbookmyshowapiconfigtest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="faa39d80-7ac0-442a-8362-0207d8726c77" >
				<munit:payload value="#[readUrl('classpath://getmoviesIDbookmyshowapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getmoviesIDbookmyshowapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getmoviesIDbookmyshowapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\movies\(ID):bookmyshow-api-config" doc:id="f2aed2df-7a9e-45a5-aee6-e4c21d3e11df" name="get:\movies\(ID):bookmyshow-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="7da29138-28e7-4212-8eab-fa3ce587fa07" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getmoviesIDbookmyshowapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\Cancelbooking:application\json:bookmyshow-api-config-test" doc:id="03269b24-8cb3-4ad0-94f1-7411fd82abad" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="2b60ab6e-8eef-4039-aeb9-09c0364d26d6" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="facb4731-9fc9-4e15-b444-f4412b181e37" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="bookingID" value="#[output application/json --- readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="7dc1713f-3446-4a73-bc17-cc83e5ae049d" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCancelbookingapplicationjsonbookmyshowapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\Cancelbooking:application\json:bookmyshow-api-config" doc:id="ae56f540-47db-42e4-94bd-daf72a676933" name="post:\Cancelbooking:application\json:bookmyshow-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="6607a337-ce44-4ccf-b371-b22bb6f8f670" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCancelbookingapplicationjsonbookmyshowapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="post:\bookmovie:application\json:bookmyshow-api-config-test" doc:id="c7ae53d7-7c92-4d7f-82ec-16b4456e8d89" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="567d0ddf-c88c-4ffc-ae40-3ad632a352db" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3049e9eb-748c-44b1-90fd-a7ee2ee381c5" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="availableseats" value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_1.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="bookingDetailsVar" value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="noofseats" value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="test" value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_4.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="movieid" value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="231b0c3c-71e2-409b-ae5c-ae47412e545e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postbookmovieapplicationjsonbookmyshowapiconfigtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to post:\bookmovie:application\json:bookmyshow-api-config" doc:id="d94bb0f2-f295-4bc1-8ee6-3218c950d3da" name="post:\bookmovie:application\json:bookmyshow-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ab417364-f57d-4d2c-8725-a44b5fd78726" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postbookmovieapplicationjsonbookmyshowapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
